#!/usr/bin/env python
# -*- coding: latin-1 -*-
description = """
This script extracts titles of latexslide Slide objects and make
variable names (for the Slide objects) out of the titles.
Symbols used in the title that lead to illegal variable names
are handled (typically these characters are ignored: !,.~@#$%&/()?-+;:"'{}<>
while blank and = go to an underscore, and Norwegian characters
are transformed to their English equivalents (æ to ae etc.).

Together with extract_slidenames the present script makes it easy
to just generate a lot of Slide objects on the fly and then afterwards
automatically give them very descriptive names and collect then
objects in lists to compose various talks.

Example on a slide file where there are no variable names assigned
to the Slide objects:

= Slide('In the beginning was Fortran 77...',
 content=[BulletBlock(bullets=[
     'Data structures = collection of primitive type of variables',
     'Data flow:',
     ['move data structures in and out of subroutines',
     'hold data in common blocks ("global variables")',
     ],
     'Memory for data must be allocated outside subroutines',
     ]),
     TextBlock(title='Long and cryptic argument lists:',
     text=' ' + Code('''
SUBROUTINE RENGRD(COOR, E2N, NSD, NEL, NNO, NPEL, SCRATCH, ...)
INTEGER NSD, NEL, NNO, NPEL, E2N(NEL, NPEL)
REAL*8  COOR(NNO, NSD), SCRATCH(...)
...
''')),],)

= Slide('Fortran: pros and cons',
 content=[BulletBlock(bullets=[
     'Still a dominating language',
     'Subroutine libraries are often easy to reuse',
     'Big problem: adding new data to data structures -- new variables must be propagated through many subroutines',
     ]),])
     
After running create_slidenames:

In_the_beginning_was_Fortran 77 \ 
= Slide('In the beginning was Fortran 77...',
 content=[BulletBlock(bullets=[
     'Data structures = collection of primitive type of variables',
     'Data flow:',
     ['move data structures in and out of subroutines',
     'hold data in common blocks ("global variables")',
     ],
     'Memory for data must be allocated outside subroutines',
     ]),
     TextBlock(title='Long and cryptic argument lists:',
     text=' ' + Code('''
SUBROUTINE RENGRD(COOR, E2N, NSD, NEL, NNO, NPEL, SCRATCH, ...)
INTEGER NSD, NEL, NNO, NPEL, E2N(NEL, NPEL)
REAL*8  COOR(NNO, NSD), SCRATCH(...)
...
''')),],)

Fortran_pros_and_cons \
= Slide('Fortran: pros and cons',
 content=[BulletBlock(bullets=[
     'Still a dominating language',
     'Subroutine libraries are often easy to reuse',
     'Big problem: adding new data to data structures -- new variables must be propagated through many subroutines',
     ]),])

"""
import os, sys, re, shutil

def text2variablename(text):
    """Make a legal variable name from an arbitrary text. Return name."""
    symbols2none = ('!', '.', ',', '~', '@', '#', '$', '%', '&', '/', '(', ')', '(', ')', '[', ']', '?', '-', '+', ';', ':', r'\emp{', '\\', '"', "'", '}', '{', '^', '<', '>',)
    symbols2underscore = (' ', '=',)
    norwegian_chars = (('\xc3\xa6', 'ae'), ('\xc3\xb8', 'o'), ('\xc3\xa5', 'aa'),
                       ('\xc3\x86', 'AE'), ('\xc3\x98', 'O'), ('\xc3\x85', 'AA'))

    for symbol in symbols2none:
        text = text.replace(symbol, '')
    for symbol in symbols2underscore:
        text = text.replace(symbol, '_')
    for norwchar, english in norwegian_chars:
        text = text.replace(norwchar, english)

    # digit first is illegal:
    while text[0].isdigit():
        text = text[1:]
    # remove leading underscores:
    while text[0] == '_':
        text = text[1:]
    return text

def insert_variables(filename):
    if not os.path.isfile(filename):
        print 'File "%s" does not exist' % filename
        sys.exit(1)

    copyfile = filename + '.old~~'
    shutil.copy(filename, copyfile)
    old = open(copyfile, 'r')
    new = open(filename, 'w')
    lines = old.readlines()
    for i in range(len(lines)):
        line = lines[i]
        #print line,
        m = re.search(r"""^\s*=\s*\w*[Slide\Section]\(\s*[r?'"](.*)['"]\s*,""", line)
        if m:
            title = m.group(1)
            #print '*****found:', title
            varname = text2variablename(title)
            # check if we already have a variable on the line before:
            if i >= 1:
                if lines[i-1].find(varname) == -1:
                    line = varname + ' \\' + '\n' + line.lstrip()
                else:
                    #print 'found slidename on previous line'
                    pass
        new.write(line)
    old.close()
    new.close()


try:
    filename = sys.argv[1] 
except IndexError:
    print 'Usage: %s filename' % sys.argv[0]
    sys.exit(1)

# help?
if filename in ('-h', '--help'):
    print description; sys.exit(0)

insert_variables(filename)
