= PDF version =
A PDF version of this tutorial can be found [http://folk.uio.no/ilmarw/latexslides/doc.pdf here.]
= Introduction =
== Background ==
If the background doesn't interest you, and you just want to get started with
latexslides, jump to the 'Usage' section.

For most people in the
fields of natural sciences, LaTeX is the preferred typesetting
tool. Therefore, it didn't take long before different packages where developed
allowing people to create slides with LaTeX. One very popular is Prosper, 
while Beamer is the latest and the fanciest and most PowerPoint-like
package for LaTeX slides. Unfortunately, there is a lot of LaTeX commands
that you need to insert to make LaTeX slides. What if we could just write
the basic slide contents and insert a minimum of tags? That is, it could
be nice with a simpler syntax than what LaTeX slide packages require.

Another point is that it takes quite some boring work to update old
presentations, written in Prosper or even older syntax, to a new
package like Beamer. And what about the next super-package for LaTeX
slides? It would be good if all your slides were written with a
LaTeX-independent syntax such that the slides can easily be ported
to a new (or old) format.

A third point is that sometimes we would like to automate the writing
of slides, for example when creating animations where several slides
with small differences are typically written by manual 
cut and paste operations. It would be better to have a program doing this.

From these request, it became natural to specify slides as a program
and automate the generation of the specific syntax of specific LaTeX
packages. Our solution is `latexslides`, which is written in Python
and requires you to write your slides in Python. Typically, each
slide is a `Slide` object, to which you assign a name, and then you
can collect the names in lists to compose a particular presentation.
It is easy to have your slides in modules such that new presentations
can import slides from other presentations. This gives great flexibility
in reusing slides from presentation to presentation without taking a
copy of the slides.

Another important point is, of course, that whatever can be done in Python, 
should be done in Python :-) Also slides...
== History ==
Initially, `LaTeXSlides` was a module and script written by Hans Petter
Langtangen and later improved by Åsmund Ødegård, both at Simula Research 
Laboratory, Oslo, Norway. `LaTeXSlides` soon became quite popular as
it autogenerated both Beamer and Prosper slides from a minimum of
Python commands specifying the slides. However, `LaTeXSlides`
needed a complete redesign to better scale with future demands.
Arve Knudsen, Simula, did a first try at this, and Ilmar Wilbers
did the complete job of creating a well-designed package for
slide generation in Python. The old API of `LaTeXSlides` is still
supported for backward compatibility.
= Usage =
If you want to get started with latexslides, it is recommended
that you take a look at the file `doc/exampletalk.py` which has many of the
functionalities that are available. Going through the source code of this talk
at the same time as reading the pdf, should get you started in less then half
an hour.
You can also generate a new, empty presentation by typing
{{{
python -c "import latexslides; latexslides.generate("myfile.py")"`
}}}
Just invoke and edit the file `myfile.py`.
== Keyword arguments ==
Objects in `latexslides` makes heavily use of keyword arguments. This
means that when creating a new object, there are very few, if any,
arguments that are mandatory. A lot of options are optional, and will
be ignored if not present, or suitable default values will be used.
== Initialization ==
After an 
{{{
from latexslides import *
}}}
the first instance we need to create is
an instance of a subclass of the class Slides. This can be (at this time)
either ProsperSlides, BeamerSlides or HTMLSlides. Here is a list of keyword
arguments for the constructor:
 * `title`           
   * default: 'Here goes the title of the talk'
   * type: str
 * `author_and_inst`
   * default: [('author1', institution1'), ('author2', 'institution2', 'institution3')]
   * type: list with tuples
 * `date`
   * default: None
   * type: str
   * comment: Today's date is chosen if not set.
 * `titlepage`
   * default: True
   * type: bool
   * comment: If set to 'False', the titlepage is skipped. If there is a figure on the titlepage, however, the figure will be displayed.
 * `titlepage_figure`
   * default: None
   * type: str
   * package: Beamer
   * comment: Give name of file.
 * `titlepage_figure_pos`
   * default: 's'
   * type: str
   * package: Beamer
   * comments: Values can be either 'e' or 's'. Really, anything but 's' results in 'e'.
 * `titlepage_figure_fraction_width`
   * default: 1.0
   * type: float
   * package: Beamer
   * comment: Scales the picture, keeps aspect ratio.
 * `titlepage_left_column_width`
   * default: 0.5
   * type: float
   * package: Beamer
   * comment: If the figure is positioned to the left or right, two columns are used. This value sets the size of the left column, the size of the right column is 1.0 minus this value.
 * `short_title`
   * default: ''
   * type: str
   * package: Beamer 
   * comment: If the title is very long, this value, if present, is used instead of the main title if it is too large to fit somewhere in the presentation.
 * `short_author`
   * default: None
   * type: str
   * package: Beamer
   * comment: If the name of the authors(s) is too long to fit, this value, if present, is used instead. Else a string consisting of the first author lastname with 'et al.' added to it is used.
 * `copyright_text`
   * default: None
   * type: str
   * package: Prosper
 * `toc_heading`
   * default: 'Outline'
   * type: str
   * package: Beamer
   * comment: The heading of table of contence, shown between all sections and subsections. If set to 'None' or an empty string, these are skipped. This might be preferable for shorter presentations.
 * `toc_figure`
   * default: None
   * type: str
   * package: Beamer
   * comment: Give name of file.
 * `toc_figure_fraction_width`
   * default: 1.0
   * type: float
   * package: Beamer
   * comment: Scales the picture, keeps aspect ratio. 
 * `toc_left_column_width`
   * default: 0.5
   * type: float
   * package: Beamer
   * comment: The figure is positioned to the left of the toc, hence two columns are used. This value sets the size of the left column, the size of the right column is 1.0 minus this value.
 * `colour`
   * default: True
   * type: bool
   * comment: Makes the slides more suited for printing. Table of contence is dropped, and colours are removed from the background. Different behaviour for the different packages. Beamer forces the use of the theme 'seahorse'.
 * `handout`
   * default: False
   * type: bool
   * package: Beamer
   * comment: Makes the slides more suited for printing. Table of contence is dropped, and colours are removed from the background. Different behaviour for the different packages. The same as `colour`, but without 'seahorse' as the forced colour theme.
 * `theme`
   * default: 'shadow'
   * type: str
   * package: Beamer
   * comment: All default Beamer themes are available. In addition the themes 'simula' and 'hpl1' are included with the latexslides package. Different themes might lead to different output. The use of 'simula' or 'hpl1' is recommended. Read more about styles in the section Styles.
 * `colour_theme`
   * default: 'default'
   * type: str
   * package: Beamer
   * comment: All default Beamer colour themes are available. For printing, the colour theme 'seahorse' is recommended, as it is almost black and white. Take care not to use the 'simula' theme with this one, as not all colours that are set there are overridden by this colour theme, resulting in some orange. If `colour` is set to 'False', this argument is overriden and the theme set to 'seahorse'.
 * `style`
   * default: 'default'  
   * type: str
   * package: Prosper
   * comment: all default Prosper styles are available. In addition the style 'hplplainsmall' is included with the latexslides package. The use of 'hplplainsmall' is recommended, as it matches the font sizes of the Beamer themes better, making it less likely for text not to fit on the slides when switching from Beamer to Prosper then with 'default'.
 * `header_footer`
   * default: True
   * type: bool
   * package: Beamer
   * comment: Removes the top and bottom of the slide. On the top, the index over sections is removed, at the bottom the authors and title are removed. Theme dependent.
 * `html`
   * default: False
   * type: bool
   * package: Beamer
   * comment: This enables the possibility to dump the slides to HTML. Setting this variable to 'True' and `toc_heading` to an empty string gives the same result as using HTMLSlides instead of BeamerSlides (HTMLSlides simply sets this variable to 'True' and `toc_heading` to an empty string). Requires the package tex4ht to be installed.
 * `newcommands`
   * default: []
   * type: list or str
   * comment: Adds the users own commands to the top of the latex file, as latexslides support raw latex code. Can be given as a list of strings or a string seperated by newline.
 * `latexpackages`
   * default: ""
   * type: str
   * comment: Adds additional packages to the list of packages at the beginning of the latex file. In order to allow options to the packages, it is a simple multiline string.
== Adding slides ==
After having created the `BeamerSlides` or `ProsperSlides` object,
we are ready to start creating individual slides. 
There are three types of slides.
 * TextSlide
 * BulletSlide
 * Slide
The last one can consist of several objects, whereas the first two slides are
meant for plain text or plain bullets, respectively.
=== TextSlide ===
TextSlide has the following keyword arguments:
 * `text`
   * default: ''
   * type: str
   * comment: The text to be placed on the slide.
 * `title`
   * default: ''
   * type: str
   * comment: When empty string is given, no title is displayed.
 * `block_heading`
   * default: ''
   * type: str
   * comment: Additional title for the block. When empty string is given, no title is displayed.
 * `hidden`
   * default: False
   * type: bool
   * comment: If 'True', the slide is skipped. The properties `hide` and `unhide` can also be used, and will return the slide element itself, see the sections 'Organizing the objects' and 'Writing to file' further down.
=== BulletSlide ===
BulletSlide has four keyword arguments:
 * `title`
   * default: ''
   * type: str
   * comment: When empty string is given, no title is displayed.
 * `bullets`
   * default: []
   * type: list of strings
   * comment: Each element in the list represents a bullet. The list can be nested, so that if one of the elements of the main list is a list, the items in that list will show up as subbullets.
 * `block_heading`
   * default: ''
   * type: str
   * comment: Additional title for the block.  When empty string is given, no title is displayed.
 * `hidden`
   * default: False
   * type: bool
   * comment: If 'True', the slide is skipped.
 * `dim`
   * default: None
   * type: str
   * package: Beamer
   * comment: Available dimming settings are: `progressive` (one by one bullet), `single` (only one bullet at the time), `single_then_all` (only one bullet at the time, then all), and `blocks` (one block at the time, not relevant for BulletSlide.
== Slide ==
A general slide can consist of several
objects, and we will look at them now:
 * Text
 * BulletList
 * Code
 * Block
 * TextBlock
 * BulletBlock
 * CodeBlock
The difference between the a plain object (like BulleList) and a block object
(like BulletBlock), is that the
latter is surrounded by a shadow'ed box (depending on the slide format,
Beamer or Prosper, for instance), and has an optional heading for that
box. 
=== Text ===
This class takes only one argument, and that is the text.
=== BulletList ===
This class has bullets as arguments and dim as keyword argument:
 * `bullets`
   * default: []
   * type: list of strings
   * comment: Each element in the list represents a bullet. The list can be nested, so that if one of the elements of the main list is a list, the items in that list will show up as subbullets.
 * `dim`
   * default: True
   * type: bool
   * package: Beamer
   * comment: This one is only used to override dimming if dimming is turned on for the whole slide, so that the whole block is diplayed at once even though the rest of the bullet objects on the slide appear one and one.
=== Code ===
This class has a number of keyword arguments, mainly because it supports the
option of reading the code from a file, even only reading the text in between
a start and a stop expression:
 * `code`
   * default: None
   * type: str
   * comment: The code to be inserted. Is ignored if the reading from file is chosen.
 * `file`
   * default: None
   * type: str
   * comment: The name of the file to include code from. If `from_regex` or `to_regex` is not set, the whole file is included.
 * `from_regex`
   * default: None
   * type: str
   * comment: Can only be used if `to_regex` is set as well. The file in inspected line for line, and if the regular expression matches, that line is included. All further lines are then included, untill there is a match for `to_regex`. The line that matches `to_regex` itself is not included.
 * `to_regex`
   * default: None
   * type: str
   * comment: See `from_regex`
 * `leftmargin`
   * default: '7mm'
   * type: str
   * comment: Sets the left margin for the code.
 * `fontsize`
   * default: 'footnotesize' (add backslash).
   * type: str
   * comment: Sets the size of the code font. Needs to be a valid LaTeX command ranging from 'tiny' to 'Huge' (add backslash).
=== TextBlock ===
Same as Text, but has an additional keyword argument:
 * `heading`
   * default: ''
   * type: str
   * comment: If given, used as block title.
=== BulletBlock ===
Same as BulletList, but has an additional keyword argument:
 * `heading`
   * default: ''
   * type: str
   * comment: If given, used as block title.
=== CodeBlock ===
Same as Code, but has an additional keyword argument:
 * `heading`
   * default: ''
   * type: str
   * comment: If given, used as block title.
=== Creating the slide instance ===
Once we have all the objects we want a slide to consist of, we can create the
slide instance itself. All arguments are keyword arguments:
 * `title`
   * default: ''
   * type: str
   * comment: When empty string is given, no title is displayed.
 * `content`
   * default: []
   * type: str
   * comment: All objects to be placed on the slide are sent as a list.
 * `figure`
   * default: None
   * type: str, tuple or list
   * comment: Give name of file or list of filenames.
 * `figure_pos`
   * default: 's'
   * type: str
   * comments: Figure can be placed north ('n'), east ('e'), south ('s') and west ('w') on the slide. The same for all figures.
 * `figure_fraction_width`
   * default: 1.0
   * type: float
   * comment: Scales the picture, keeps aspect ratio. `figure_size` can be used as well. In case both options are given, `figure_size` is chosen. If multiple figures are given with figure, the length of this argument is expected to be the same, else the program exits with an error. The exception is if the length of the argument is 1 (or it is omitted), then this value (or the default of 1.0) will be used for all figures.
 * `figure_angle`
   * default: None
   * type: int or str
   * comment: Give angle in degrees in the counter-clockwise direction to rotate image. Negative values can be used. The same for all figures.
 * `left_column_width`
   * default: 0.5
   * type: float
   * comment: If the figure is positioned to the left or right, two columns are used. This value sets the size of the left column, the size of the right column is 1.0 minus this value. 
 * `hidden`
   * default: False
   * type: bool
   * comment: If 'True', the slide is skipped.
 * `dim`
   * default: None
   * type: str
   * package: Beamer
   * comment: Available dimming settings are: `progressive` (one by one bullet), `single` (only one bullet at the time), `single_then_all` (only one bullet at the time, then all), and `blocks` (one block at the time). Subitems will always be shown together with their parent. If a spesific block has the option `dim` set to 'False', the dim option for the slide is overridden. Setting `dim` for a block to False should only be used with `progressive`. When adding something to a slide that is not part of a block, the result can be unsatisfactory.
== Adding sections ==
Sections are added as in the same way as normal slides, except they are of
type Section. If no section is defined, normal slides are simply added to a
list of slides. If a section is defined, all slides added after that object
will be part of this section, until a new section is defined. It has two
keyword arguments:
 * `title`
   Default is an empty string.
 * `short_title`
   Used when there is no space for the main title. Default is an empty string.
== Adding subsections ==
As for Section, SubSection is added as a special class object. If a subsection
is added before a section is added, an error is issued and the generation of
slides terminated. If a subsection is defined, all slides added after that object
will be part of this subsection, until a new section or subsection is
defined. It has two keyword arguments:
 * `title`
   Default is an empty string.
 * `short_title`
   Used when there is no space for the main title. Default is an empty string.
== Organizing the objects ==
Instead of creating a slide and adding it immediately, it might be better to
generate all the slide objects, and then add all the slides in the end of the
file. This way, it is easier to change the order of the slides. 
== latextable ==
The package includes a function called latextable, which returns the code for
a latextable based on a two-dimensional list of data. It takes the
two-dimensional list as argument, and has in addition the following two
commandline arguments:
 * `column_headline_pos`
   * default: 'c'
   * type: str
   * comment: The position of the text for the headline row, valid values are 'l', 'c' and 'r' for left, center and right, respectively.
 * `column_pos`
   * default: 'c'
   * type: str
   * comment: The position of the text for each row. If only a single character, it is the same for every row. Else, the character are used one-by-one for every row. For instance, the string 'crl' would mean that the first ordinary row is centered, the seconde one right justified, and the third one left justified.
== Writing to file ==
When finished writing the presentation, we can dump the LaTeX code to
file. This done by simply calling the function `write` for the slides
object. The argument is the filename. A list of all slide objects can be
generated from the file exampletalk.py by running the executable
`extract_slidenames`:
{{{
extract_slidenames exampletalk.py
}}}
The list can be included at the bottom of the file. Afterwards, one simply
needs to include the following command, where `collection` is the (generated)
list of slides:
{{{
for c in collection:
    slides.add_slide(c)
filename = 'mytalk.tex'
slides.write(filename)
}}}
== Compiling the talk ==
If the function `slides.write()` is used, the necessary latex commands are
outputted to screen. If not, one simply uses `latex mytalk.tex`. Please note
that the generation of HTML slides requires som additional compiling after
running `latex`, namely `tex4ht` and `t4ht`.
== About figure support ==
Because Prosper cannot be used with `pdflatex`, `latex` is recommended. This
means, however, that only .ps images can be used, not .png, if portability
between Prosper and Beamer is desirable. It is recommended that you use the
ImageMagick `convert` tool for converting .png to .ps, and including them as
.ps.
= Package spesifics =
== ProsperSlides ==
Some of the keyword arguments are only available to BeamerSlides and
HTMLSlides. If these keyword arguments are present when using ProsperSlides,
they are simply ignored.
== HTMLSlides ==
HTMLSlides differs from BeamerSlides only in the following way:
 * The `html` keyword for Slides is set to 'True'.
 * The `toc_heading` keyword for Slides is set to en empty string, removes the table of contence.
 * All sections and subsections are removed.
= Styles =
Several latexstyles are included with this package. These are:
 * beamerthemsimula.sty
 * beamerthemehpl1.sty
for Beamer and:
 * PPRhplplain.sty
 * PPRhplplain2.sty
 * PPRhplplainsmall.sty
for Prosper. These are located in the folder `styles`. If you want to use
these, you might want to set the following in your shell start-up file (for
Bash, this is `~/.bashrc`:
{{{
export TEXINPUTS=:.:/absolute/path/to/styles
}}}
Note the first semi-colon; it ensures that the systemwide directories are
searched first.
= Emacs bindings =
The following Emacs command (Alt + up-arrow) starts a slide object
without a variable name:
{{{
(global-set-key [ (meta up)] " = Slide('',
content=[BulletBlock(bullets=[
    '',")
}}}
Bullet points are then written.
The end of the `Slide` object is automatically generated by
this Emacs command (Alt + down-arrow):
{{{
(global-set-key [ (meta down)] "
]),  # end bullets and BulletBlock
],   # end contents
)")
}}}
In order for these to work, the commands need to be included in the file
`.emacs` in your home directory. Sorry, no vim bindings!
= oldlatexslides =
The source code from the old LaTeXSlides package can still be used, however it
needs a few modifications. We start by importing the module:
{{{
import oldlatexslides as LaTeXSlides
}}}
Here, we assume that the import statement in
your old presentations was `import LaTeXSlides`, not 
`from LaTeXSlides import *`. If you used the latter, you might want to try 
{{{
from oldlatexslides import *
}}}
The only difference is that the header, titlepage and footer objects are to be
omitted, meaning they should not be part of the list that is created at the
end of the talk. Finally, the `header_footer` argument that was used for each
bulletslide in the old package is now a global variable set in the
inititiation of the main slides class, and is the same for all slides.
= Support =
Please contact `ilmarw@simula.no` for bug reports, feature requests and
general help.